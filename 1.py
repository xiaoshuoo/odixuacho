import logging
import random
import asyncio
import requests
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
TOKEN = '6485208774:AAFZGg38WknfhrQMabVH1naJszJxU8bDJOI'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Spotify
SPOTIFY_CLIENT_ID = 'efb4c646267c40c298686785b9f5a3a1'
SPOTIFY_CLIENT_SECRET = 'a263e968e5cc4d0db8422403af4782af'



# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Genius
GENIUS_API_TOKEN = 'i88AmXnc3H_ha5CBKqH4Krk0ql8CwsLLjabYrvDWsPxHCW1-wg1GsRzeQt7GdasY'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spotify –∫–ª–∏–µ–Ω—Ç–∞
spotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET
))

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä
hangman_games = {}
music_games = {}

class MusicGame:
    def __init__(self):
        self.current_track = None
        self.is_active = False

    def reset(self):
        self.current_track = None
        self.is_active = False

def get_lyrics(song_name, artist_name):
    headers = {'Authorization': f'Bearer {GENIUS_API_TOKEN}'}
    search_url = 'https://api.genius.com/search'
    response = requests.get(search_url, headers=headers, params={'q': f"{song_name} {artist_name}"})
    json_response = response.json()
    
    if json_response['response']['hits']:
        song_path = json_response['response']['hits'][0]['result']['path']
        song_url = f'https://genius.com{song_path}'
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —Å Genius
        page = requests.get(song_url)
        soup = BeautifulSoup(page.text, 'html.parser')
        lyrics = soup.find('div', class_='lyrics')
        
        if lyrics:
            return lyrics.get_text()
    
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏."

async def musicgame_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if chat_id in music_games:
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!")
        return

    music_games[chat_id] = MusicGame()
    game = music_games[chat_id]
    game.is_active = True

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
    playlists = spotify.user_playlists('spotify')
    playlist = random.choice(playlists['items'])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    tracks = spotify.playlist_tracks(playlist['id'])
    track = random.choice(tracks['items'])['track']

    game.current_track = {
        'name': track['name'],
        'artist': track['artists'][0]['name']
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
    lyrics = get_lyrics(game.current_track['name'], game.current_track['artist'])
    if lyrics != "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏.":
        lyrics_lines = lyrics.split('\n')
        sample_line = random.choice(lyrics_lines).strip()
    else:
        sample_line = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    await update.message.reply_text(f"üéµ –£–≥–∞–¥–∞–π—Ç–µ –ø–µ—Å–Ω—é! –í–æ—Ç –æ–¥–Ω–∞ –∏–∑ —Å—Ç—Ä–æ—á–µ–∫:\n{sample_line}\n–£ –≤–∞—Å 30 —Å–µ–∫—É–Ω–¥.")

    await asyncio.sleep(30)

    if chat_id in music_games:
        await update.message.reply_text(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –≠—Ç–æ –±—ã–ª–∞ –ø–µ—Å–Ω—è {game.current_track['name']} - {game.current_track['artist']}")
        del music_games[chat_id]

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    
    # –ï—Å–ª–∏ –∏–¥–µ—Ç –∏–≥—Ä–∞ –≤ —É–≥–∞–¥–∞–π –º–µ–ª–æ–¥–∏—é
    if chat_id in music_games:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–≥–∞–¥–∞–π—Ç–µ –ø–µ—Å–Ω—é!")
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /musicgame")

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", lambda update, context: update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /musicgame, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")))
    application.add_handler(CommandHandler("musicgame", musicgame_start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    application.run_polling()

if __name__ == '__main__':
    main()
